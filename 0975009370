local AutoExecuted = false
if not game:IsLoaded() then AutoExecuted = true end

repeat task.wait() until game.PlaceId ~= nil
if not game:IsLoaded() then game.Loaded:Wait() end

--//-------------- getgenv ----------------//*
getgenv().isRun = true
--//-------------- SERVICES ----------------//*
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local InputService = game:GetService('UserInputService')
local RunService = game:GetService('RunService')
local ContentProvider = game:GetService("ContentProvider")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Camera = workspace.CurrentCamera
--//*--------- GLOBAL VARIABLES -----------//*
local ScriptIsCurrentlyBusy = false
local Character = nil
local Humanoid = nil
local HumanoidRootPart = nil
local CurrentWorld = ""
local CurrentPosition = nil

local Settings_DisableRendering = true

local Webhook_Enabled = false
local Webhook_URL = ""
local Webhook_Daycare = true
local Webhook_Huge = true
--//-------------- [version] ----------------//*
print("Version:", 125)

LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    Humanoid = Character:WaitForChild("Humanoid")
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)

if game.PlaceId == 6284583030 then
    local banSuccess, banError = pcall(function()
        local Blunder = require(game:GetService("ReplicatedStorage"):WaitForChild("X", 10):WaitForChild("Blunder", 10)
            :WaitForChild("BlunderList", 10))
        if not Blunder or not Blunder.getAndClear then
            LocalPlayer:Kick(
                "Error while bypassing the anti-cheat! (Didn't find blunder)")
        end

        -- local OldGet = Blunder.getAndClear
        -- setreadonly(Blunder, false)
        -- local function OutputData(Message)
        --     print("-- PET SIM X BLUNDER --")
        --     print(Message .. "\n")
        -- end

        -- Blunder.getAndClear = function(...)
        --     local Packet = ...
        --     for i, v in next, Packet.list do
        --         if v.message ~= "PING" then
        --             OutputData(v.message)
        --             table.remove(Packet.list, i)
        --         end
        --     end
        --     return OldGet(Packet)
        -- end

        --setreadonly(Blunder, true)
    end)

    if not banSuccess then
        LocalPlayer:Kick("Error while bypassing the anti-cheat! (" .. banError .. ")")
        return
    end

    local Library = require(game:GetService("ReplicatedStorage").Library)
    assert(Library, "Oopps! Library has not been loaded. Maybe try re-joining?")
    while not Library.Loaded do task.wait() end

    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    Humanoid = Character:WaitForChild("Humanoid")
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")


    local bypassSuccess, bypassError = pcall(function()
        if not Library.Network then
            LocalPlayer:Kick("Network not found, can't bypass!")
        end

        if not Library.Network.Invoke or not Library.Network.Fire then
            LocalPlayer:Kick("Network Invoke/Fire was not found! Failed to bypass!")
        end

        hookfunction(debug.getupvalue(Library.Network.Invoke, 1), function(...) return true end)
        -- Currently we don't need to hook Fire, since both Invoke/Fire have the same upvalue, this may change in future.
        -- hookfunction(debug.getupvalue(Library.Network.Fire, 1), function(...) return true end)

        local originalPlay = Library.Audio.Play
        Library.Audio.Play = function(...)
            if checkcaller() then
                local audioId, parent, pitch, volume, maxDistance, group, looped, timePosition = unpack({ ... })
                if type(audioId) == "table" then
                    audioId = audioId[Random.new():NextInteger(1, #audioId)]
                end
                if not parent then
                    warn("Parent cannot be nil", debug.traceback())
                    return nil
                end
                if audioId == 0 then return nil end

                if type(audioId) == "number" or not string.find(audioId, "rbxassetid://", 1, true) then
                    audioId = "rbxassetid://" .. audioId
                end
                if pitch and type(pitch) == "table" then
                    pitch = Random.new():NextNumber(unpack(pitch))
                end
                if volume and type(volume) == "table" then
                    volume = Random.new():NextNumber(unpack(volume))
                end
                if group then
                    local soundGroup = game.SoundService:FindFirstChild(group) or nil
                else
                    soundGroup = nil
                end
                if timePosition == nil then
                    timePosition = 0
                else
                    timePosition = timePosition
                end
                local isGargabe = false
                if not pcall(function() local _ = parent.Parent end) then
                    local newParent = parent
                    pcall(function()
                        newParent = CFrame.new(newParent)
                    end)
                    parent = Instance.new("Part")
                    parent.Anchored = true
                    parent.CanCollide = false
                    parent.CFrame = newParent
                    parent.Size = Vector3.new()
                    parent.Transparency = 1
                    parent.Parent = workspace:WaitForChild("__DEBRIS")
                    isGargabe = true
                end
                local sound = Instance.new("Sound")
                sound.SoundId = audioId
                sound.Name = "sound-" .. audioId
                sound.Pitch = pitch and 1
                sound.Volume = volume and 0.5
                sound.SoundGroup = soundGroup
                sound.Looped = looped and false
                sound.MaxDistance = maxDistance and 100
                sound.TimePosition = timePosition
                sound.RollOffMode = Enum.RollOffMode.Linear
                sound.Parent = parent
                if not require(game:GetService("ReplicatedStorage"):WaitForChild("Library"):WaitForChild("Client")).Settings.SoundsEnabled then
                    sound:SetAttribute("CachedVolume", sound.Volume)
                    sound.Volume = 0
                end
                sound:Play()
                getfenv(originalPlay).AddToGarbageCollection(sound, isGargabe)
                return sound
            end

            return originalPlay(...)
        end
    end)

    if not bypassSuccess then
        print(bypassError)
        LocalPlayer:Kick("Error while bypassing network, try again or wait for an update!")
        return
    end

    --LocalPlayer.PlayerScripts:WaitForChild("Scripts", 10):WaitForChild("Game", 10):WaitForChild("Coins", 10)
    --LocalPlayer.PlayerScripts:WaitForChild("Scripts", 10):WaitForChild("Game", 10):WaitForChild("Pets", 10)

    wait()

    -- local orbsScript = getsenv(game.Players.LocalPlayer.PlayerScripts.Scripts.Game:WaitForChild("Orbs", 10))
    -- local CollectOrb = orbsScript.Collect

    local GetRemoteFunction = debug.getupvalue(Library.Network.Invoke, 2)
    -- OrbList = debug.getupvalue(orbsScript.Collect, 1)
    local CoinsTable = debug.getupvalue(
        getsenv(LocalPlayer.PlayerScripts.Scripts.Game:WaitForChild("Coins", 10)).DestroyAllCoins, 1)
    local RenderedPets = debug.getupvalue(
        getsenv(LocalPlayer.PlayerScripts.Scripts.Game:WaitForChild("Pets", 10)).NetworkUpdate, 1)

    local farmMaxDistance = 300

    --Hàm sắp xếp coins từ CoinsTable, Coins nào gần Nhân Vật thì được sắp trước
    function SortCoinsByPriority(coins)
        local sortedCoins = {}


        CoinsTable = debug.getupvalue(getsenv(LocalPlayer.PlayerScripts.Scripts.Game.Coins).DestroyAllCoins, 1)

        for _, coin in pairs(coins) do
            local coinMesh = coin:FindFirstChild("Coin")
            local mag = (HumanoidRootPart.Position - coinMesh.Position).magnitude
            if CoinsTable[coin.Name] and mag <= math.max(math.min(farmMaxDistance, Library.Settings.CoinGrabDistance), 10) and Library.WorldCmds.HasArea(coin:GetAttribute("Area")) then
                table.insert(sortedCoins, coin)
            end
        end


        table.sort(sortedCoins, function(coinA, coinB)
            local a = CoinsTable[coinA.Name]
            local b = CoinsTable[coinB.Name]

            local APriority = GetCoinLowestPriority(a, b)
            local BPriority = GetCoinLowestPriority(b, a)

            return APriority < BPriority
        end)
        return sortedCoins
    end

    --Hàm sắp xếp coins từ CoinsTable, Coins nào gần Nhân Vật thì được sắp trước
    function SortCoinsByPriorityFastMode(coins)
        local sortedCoins = {}
        for coinId, coin in pairs(coins) do
            coin.coinId = coinId
            local mag = (HumanoidRootPart.Position - coin.p).magnitude
            if mag <= math.max(math.min(farmMaxDistance, Library.Settings.CoinGrabDistance), 10) and Library.WorldCmds.HasArea(coin.a) then
                table.insert(sortedCoins, coin)
            end
        end

        table.sort(sortedCoins, function(a, b)
            local APriority = GetCoinLowestPriority(a, b)
            local BPriority = GetCoinLowestPriority(b, a)

            return APriority < BPriority
        end)

        return sortedCoins
    end

    --Hàm tính HP của Coins
    function CalcMultiplier(coinBonus)
        if not coinBonus then return 0 end
        local totalMultiplier = 0
        if coinBonus.l then
            for _, v in pairs(coinBonus.l) do
                pcall(function()
                    if v.m and tonumber(v.m) then
                        totalMultiplier = totalMultiplier + v.m
                    end
                end)
            end
        end
        return totalMultiplier
    end

    --Sắp xếp theo thứ tự coins cần farm
    function GetCoinLowestPriority(mainCoin, coinToCompare)
        local coin = Library.Directory.Coins[mainCoin.n]
        local coinCompare = Library.Directory.Coins[coinToCompare.n]

        local aMagnitude = (HumanoidRootPart.Position - mainCoin.p).magnitude
        local bMagnitude = (HumanoidRootPart.Position - coinToCompare.p).magnitude

        local coinIsFruit = coin.breakSound == "fruit"
        local coinIsDiamond = coin.currencyType == "Diamonds"
        local coinIsEaster = coin.currencyType == "Easter Coins"

        local coinHighestMultiplier = CalcMultiplier(mainCoin.b) > CalcMultiplier(coinToCompare.b)

        local coinPriority = 9999999

        local FarmFocusList = {
            "Fruits",
            "Highest Multiplier",
            "Highest Life",
        }

        for priority, priorityName in ipairs(FarmFocusList) do
            if priorityName == "Fruits" and coinIsFruit then
                mainCoin.priority = priorityName
                coinPriority = priority
                break
            elseif priorityName == "Highest Multiplier" and coinHighestMultiplier then
                mainCoin.priority = priorityName
                coinPriority = priority
                break
            elseif priorityName == "Diamonds" and coinIsDiamond then
                mainCoin.priority = priorityName
                coinPriority = priority
                break
            elseif priorityName == "Lowest Life" and coin.health < coinCompare.health then
                mainCoin.priority = priorityName
                coinPriority = priority
                break
            elseif priorityName == "Highest Life" and coin.health > coinCompare.health then
                mainCoin.priority = priorityName
                coinPriority = priority
                break
            elseif priorityName == "Nearest" and aMagnitude < bMagnitude then
                mainCoin.priority = priorityName
                coinPriority = priority
                break
            elseif priorityName == "Longest" and aMagnitude > bMagnitude then
                mainCoin.priority = priorityName
                coinPriority = priority
                break
            elseif priorityName == "Easter Coins" and coinIsEaster then
                mainCoin.priority = priorityName
                coinPriority = priority
                break
            end
        end
        return coinPriority
    end

    local WorldCoins = Library.Things:WaitForChild("Coins")

    WorldCoins.ChildAdded:Connect(function(ch)
        if true then
            ch:SetAttribute("HasLanded", true)
            ch:SetAttribute("IsFalling", false)

            local coin = ch:WaitForChild("Coin")
            coin:SetAttribute("InstantLand", true)
        end
    end)
    warn("InstantLand Fall Coin has Loaded")

    function MoveTo(position)
        HumanoidRootPart.CFrame = position
    end

    _G.ChangingServer = false
    function ConnectServerPublic()
        if _G.ChangingServer == false then
            _G.ChangingServer = true
            task.spawn(function()
                for i = 30, 0, -1 do
                    print("Cooldown change server:", i)
                    wait(1)
                end
                local Servers = game.HttpService:JSONDecode(game:HttpGet(
                    "https://games.roblox.com/v1/games/6284583030/servers/Public?sortOrder=Asc&limit=100"))

                local sortServers = {}

                for i, v in pairs(Servers.data) do
                    if v.ping < 80 and v.playing < 3 then
                        table.insert(sortServers, v)
                    end
                end

                table.sort(sortServers, function(a, b)
                    return a.ping < b.ping
                end)

                game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, sortServers[1].id)
                _G.ChangingServer = false
            end)
        end
    end

    --Request Auto Re-join When Kicked / Disconnected / Error Message
    --game:GetService("GuiService").ErrorMessageChanged:Connect(function()
    --ConnectServerPublic()
    --end)

    function CheckCountPlayersInServer()
        if #game.Players:GetChildren() >= 13 then
            ConnectServerPublic()
        end
    end

    function AutoSpace()
        VirtualInputManager:SendKeyEvent(true, "Space", 0, game)
        wait()
        VirtualInputManager:SendKeyEvent(false, "Space", 0, game)
    end

    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        AutoSpace()
    end)
    warn("Anti-Afk has Loaded")

    _G.IsLoop = false
    _G.SendAllPet = false

    --Hàm thu thập lootbags
    task.spawn(function()
        pcall(function()
            while true do
                for _, lootbag in pairs(Library.Things:FindFirstChild("Lootbags"):GetChildren()) do
                    if lootbag and not lootbag:GetAttribute("Collected") then
                        Library.Network.Fire("Collect Lootbag", lootbag.Name,
                            HumanoidRootPart.Position +
                            Vector3.new(math.random(-0.05, 0.05), math.random(-0.05, 0.05), math.random(-0.05, 0.05)))
                        wait(0.03)
                    end
                end
                wait(0.1)
            end
        end)
    end)
    warn("CollectLootbags has Loaded")

    --Hàm thu thập Orbs
    task.spawn(function()
        while true do
            pcall(function()
                local OrbsToCollect = {}
                for orbId, orb in pairs(Library.Things:FindFirstChild("Orbs"):GetChildren()) do
                    if orbId and orb then
                        table.insert(OrbsToCollect, orb.Name)
                    end
                end

                if OrbsToCollect and #OrbsToCollect > 0 then
                    Library.Network.Fire("Claim Orbs", OrbsToCollect)
                end
            end)
            wait(0.1)
        end
    end)
    warn("CollectOrb has Loaded")

    --Auto Farm COINS
    task.spawn(function()
        while true do
            if _G.IsLoop then
                local foundCoins = SortCoinsByPriorityFastMode(CoinsTable)
                RenderedPets = debug.getupvalue(getsenv(LocalPlayer.PlayerScripts.Scripts.Game.Pets).NetworkUpdate, 1)
                CoinsTable = debug.getupvalue(getsenv(LocalPlayer.PlayerScripts.Scripts.Game.Coins).DestroyAllCoins, 1)

                --print("Coin tim thay", #foundCoins)

                if _G.SendAllPet then
                    --Nếu coin > 0 thì thực thi đoạn ở dưới
                    if foundCoins and #foundCoins > 0 then
                        --Lấy thông tin pet đang trang bị
                        local equippedPets = Library.PetCmds.GetEquipped()
                        --print("Pet dang trang bi", #equippedPets)

                        --Nếu pet > 0 thì thực thi đoạn ở dưới
                        if equippedPets and #equippedPets > 0 then
                            --Vòng lặp Farm coin, Thu thập Orb và lootbags
                            for _, pet in pairs(equippedPets) do
                                local selectedCoin = foundCoins[1]

                                if selectedCoin then
                                    task.spawn(function()
                                        Library.Network.Invoke("Join Coin", selectedCoin.coinId, { pet.uid })
                                        Library.Network.Fire("Farm Coin", selectedCoin.coinId, pet.uid)
                                    end)
                                end

                                table.remove(foundCoins, 1)
                                task.wait(0.1)
                            end
                        end
                    end
                else
                    local equippedPets = Library.PetCmds.GetEquipped()
                    local foundCoins = {}
                    local worldCoins = WorldCoins:GetChildren()
                    --print("WorldCoins", #worldCoins)
                    local sortCoinsByPriority = SortCoinsByPriority(worldCoins)
                    --print("SortWorldCoins", #sortCoinsByPriority)

                    for _, ch in ipairs(sortCoinsByPriority) do
                        local containsMyPet = false
                        local coin = CoinsTable[ch.Name]
                        local coinMesh = ch:FindFirstChild("Coin")
                        local mag = (HumanoidRootPart.Position - coinMesh.Position).magnitude

                        for _, pet in pairs(equippedPets) do
                            if coin and coin.pets and table.find(coin.pets, pet.uid) then
                                containsMyPet = true
                                break
                            end
                        end

                        if not containsMyPet and mag <= math.max(math.min(farmMaxDistance, Library.Settings.CoinGrabDistance), 10) and Library.WorldCmds.HasArea(ch:GetAttribute("Area")) then
                            table.insert(foundCoins, ch)
                        end
                    end


                    for i, pet in pairs(RenderedPets) do
                        if pet.spawned.owner == LocalPlayer and not pet.farming then
                            local coin = foundCoins[1]
                            if coin then
                                if not coin:FindFirstChild("Pets") then
                                    local petsFolder = Instance.new("Folder")
                                    petsFolder.Name = "Pets"
                                    petsFolder.Parent = coin
                                end

                                -- Legit Mode
                                Library.Signal.Fire("Select Coin", coin, pet)

                                table.remove(foundCoins, 1)
                                task.wait(0.1)
                            end
                        end
                    end
                end
            end
            wait(0.1)
        end
    end)

    task.spawn(function()
        while true do
            if _G.IsLoop then
                for i = 1, 12 do
                    Library.Network.Invoke("Redeem Free Gift", i)
                    wait(2)
                end

                local BoostsInventory = Library.Save.Get().BoostsInventory
                for i, v in pairs(BoostsInventory) do
                    if tonumber(v) ~= 0 then
                        Library.Network.Fire("Activate Boost", i)
                    end
                end

                wait(60)
            end
            wait(0.5)
        end
    end)
    warn("Auto Redeem & Activate Boosts")

    task.spawn(function()
        local spawnAxolotlDeepOcean = CFrame.new(4143.873046875, 9.539969444274902, 3792.5546875)
        local cameraAxolotl = CFrame.new(
            4190.65625, 90.2267075, 3831.80762,
            0.642760336, -0.606623769, 0.467831969,
            0, 1.4901163e-08, 0.610693038, 0.791867375, -0.50898093, 0.392529249
        )
        local spawnDiamondMine = CFrame.new(9049.576171875, -14.661337852479027, 2401.019775390625)
        local cameraDiamon = CFrame.new(
            9061.69238, 62.190361, 2336.40308,
            -0.982870579, -0.138870955, 0.121162109,
            0, 0.657428324, 0.753516972, -0.184297055, 0.740609646, -0.64616698
        )

        Library.WorldCmds.Load("Spawn")

        while true do
            if getgenv().isRun then
                --Fram Fruits
                local timeOutFarmFruits = 100
                local isMoveAxolotl = false
                while timeOutFarmFruits > 0 and getgenv().isRun do
                    --CheckCountPlayersInServer()
                    if Library.WorldCmds.Get() ~= "Axolotl Ocean" then
                        Library.WorldCmds.Load("Axolotl Ocean")
                        wait(5)
                    end

                    if  isMoveAxolotl == false then
                        wait(1)
                        HumanoidRootPart.CFrame = spawnAxolotlDeepOcean
                        isMoveAxolotl = true
                    end

                    _G.IsLoop = true
                    _G.SendAllPet = true

                    timeOutFarmFruits = timeOutFarmFruits - 1
                    --print("FRUITS Cooldown:", timeOutFarmFruits)
                    wait(1)
                end
                _G.IsLoop = false;


                --Farm Diamonds
                local timeOutFarmDiamondMine = 600
                local isMoveDiamod = false
                while timeOutFarmDiamondMine > 0 and getgenv().isRun do
                    --CheckCountPlayersInServer()

                    if Library.WorldCmds.Get() ~= "Diamond Mine" then
                        Library.WorldCmds.Load("Diamond Mine")
                        wait(5)

                        if Library.WorldCmds.Get() == "Spawn" then
                            break;
                        end
                    else

                        if isMoveDiamod == false then
                            HumanoidRootPart = spawnDiamondMine
                            isMoveDiamod = true
                        end

                        _G.IsLoop = true
                        _G.SendAllPet = false

                        timeOutFarmDiamondMine = timeOutFarmDiamondMine - 1
                        --print("DIAMONDS Cooldown:", timeOutFarmDiamondMine)
                        wait(1)
                    end
                end
                _G.IsLoop = false;
            end
            wait(0.1)
            _G.IsLoop = false
        end
    end)
end
